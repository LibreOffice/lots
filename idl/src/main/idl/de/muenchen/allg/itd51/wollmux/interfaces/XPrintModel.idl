/*-
 * #%L
 * WollMux Interfaces
 * %%
 * Copyright (C) 2005 - 2024 Landeshauptstadt München and LibreOffice contributors
 * %%
 * Licensed under the EUPL, Version 1.1 or – as soon they will be
 * approved by the European Commission - subsequent versions of the
 * EUPL (the "Licence");
 *
 * You may not use this work except in compliance with the Licence.
 * You may obtain a copy of the Licence at:
 *
 * http://ec.europa.eu/idabc/eupl5
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the Licence is distributed on an "AS IS" basis,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the Licence for the specific language governing permissions and
 * limitations under the Licence.
 * #L%
 */
#ifndef __de_muenchen_allg_itd51_wollmux_XPrintModel_idl__
#define __de_muenchen_allg_itd51_wollmux_XPrintModel_idl__

#include <com/sun/star/uno/XInterface.idl>
#include <com/sun/star/lang/NoSuchMethodException.idl>
#include <com/sun/star/text/XTextDocument.idl>
#include <com/sun/star/beans/XPropertySet.idl>
#include <com/sun/star/beans/PropertyValue.idl>

module de {  module muenchen {  module allg { module itd51 { module wollmux { module interfaces {

/**
  Jeder Druckfunktion wird beim Aufruf ein XPrintModel-Objekt übergeben, über
  das der Zugriff auf das Dokument und Komfortmethoden für den Druck zur
  Verfuegung stehen. Verschiedene Druckfunktionen können dabei zu einer
  Aufrufkette zusammengefügt sein.
 */
interface XPrintModel
{

    /**
     * Jede Druckfunktion kann über dieses Interface beliebige funktionsspezifische
     * Properties im XPrintModel setzen, die von anderen Druckfunktionen in der
     * Aufrufkette des XPrintModels ausgewertet werden können. Abweichend vom
     * Standardverhalten von XPropertySet akzeptiert diese Implementierung alle
     * Property-Namen und fügt Properties neu hinzu, wenn sie noch nicht vorhanden
     * sind.
     */
	interface com::sun::star::beans::XPropertySet;

	/**
	 * Diese Komfortmethode verhält sich wie
	 * c.s.s.b.XPropertySet.getPropertyValue([in] string PropertyName), mit
	 * dem Unterschied, dass sie keine Exceptions schmeißt und im Fehlerfall
	 * defaultValue zurück liefert.
	 */
	any getProp( [in] string PropertyName, [in] any defaultValue);

    /**
     * Lädt die in der lots.conf definierte Druckfunktion mit dem Namen
     * functionName in das XPrintModel und ordnet sie gemäß dem ORDER-Attribut an der
     * richtigen Position in die Aufrufkette der zu bearbeitenden Druckfunktionen
     * ein; Wird die Druckfunktion aufgerufen, so bekommt sie genau ein Argument
     * (dieses XPrintModel) übergeben.
     *
     * @param functionName
     *          Name der Druckfunktion, die durch das PrimaryPrintModel verwaltet
     *          werden soll.
     * @throws NoSuchMethodException
     *           Wird geworfen, wenn die Druckfunktion nicht definiert ist.
     */
    void usePrintFunction([in] string functionName) raises ( com::sun::star::lang::NoSuchMethodException );

    /**
     * Liefert das XTextDocument mit dem die Druckfunktion aufgerufen wurde.
     */
    com::sun::star::text::XTextDocument getTextDocument();

    /**
     * Diese Methode ruft numberOfCopies mal printWithProps() auf.
     */
    void print( [in] short numberOfCopies);

    /**
     * Druckt das TextDocument auf dem aktuell eingestellten Drucker aus oder leitet
     * die Anfrage an die nächste verfügbare Druckfunktion in der Aufrufkette weiter,
     * wenn eine weitere Druckfunktion vorhanden ist; Abhängig von der gesetzten
     * Druckfunktion werden dabei verschiedene Properties, die über
     * setPropertyValue(...) gesetzt wurden ausgewertet. Die Methode kehrt erst dann
     * wieder zurück, wenn der gesamte Druckvorgang dieser und der darunterliegenden
     * Druckfunktionen vollständig ausgeführt wurde.
     */
    void printWithProps();

    /**
     * Falls es sich bei dem zugehörigen Dokument um ein Formulardokument (mit
     * einer Formularbeschreibung) handelt, wird das Formularfeld mit der ID id
     * auf den neuen Wert value gesetzt und alle von diesem Formularfeld
     * abhängigen Formularfelder entsprechend angepasst. Handelt es sich beim
     * zugehörigen Dokument um ein Dokument ohne Formularbeschreibung, so werden
     * nur alle insertFormValue-Kommandos dieses Dokuments angepasst, die die ID
     * id besitzen.
     *
     * @param id
     *          Die ID des Formularfeldes, dessen Wert verändert werden soll.
     *          Ist die FormGUI aktiv, so werden auch alle von id abhängigen
     *          Formularwerte neu gesetzt.
     * @param value
     *          Der neue Wert des Formularfeldes id
     */
    void setFormValue( [in] string id, [in] string value);

    /**
     * Liefert true, wenn das Dokument als "modifiziert" markiert ist und damit
     * z.B. die "Speichern?" Abfrage vor dem Schließen erscheint.
     *
     * Manche Druckfunktionen verändern u.U. den Inhalt von Dokumenten. Trotzdem
     * kann es sein, dass eine solche Druckfunktion den "Modifiziert"-Status des
     * Dokuments nicht verändern darf um ungewünschte "Speichern?"-Abfragen zu
     * verhindern. In diesem Fall kann der "Modifiziert"-Status mit folgendem
     * Konstrukt innerhalb der Druckfunktion unverändert gehalten werden:
     *
     * boolean modified = pmod.getDocumentModified();
     *
     * ...die eigentliche Druckfunktion, die das Dokument verändert...
     *
     * pmod.setDocumentModified(modified);
     */
    boolean getDocumentModified();

    /**
     * Diese Methode setzt den DocumentModified-Status auf modified.
     */
    void setDocumentModified( [in] boolean modified);

    /**
     * Sammelt alle Formularfelder des Dokuments auf, die nicht von
     * WollMux-Kommandos umgeben sind, jedoch trotzdem vom WollMux verstanden
     * und befüllt werden (derzeit c,s,s,t,textfield,Database-Felder). So werden
     * z.B. Seriendruckfelder erkannt, die erst nach dem Öffnen des Dokuments
     * manuell hinzugefügt wurden.
     */
    void collectNonWollMuxFormFields();

    /**
     * Diese Methode setzt die Eigenschaften "Sichtbar" (visible) und die
     * Anzeige der Hintergrundfarbe (showHighlightColor) für alle Druckblöcke
     * eines bestimmten Blocktyps blockName (z.B. "AllVersions").
     *
     * @param blockName
     *          Der Blocktyp dessen Druckblöcke behandelt werden sollen.
     *          Folgende Blocknamen werden derzeit unterstützt: "AllVersions",
     *          "DraftOnly", "OriginalOnly", "CopyOnly" und "NotInOriginal"
     * @param visible
     *          Der Block wird sichtbar, wenn visible==true und unsichtbar, wenn
     *          visible==false.
     * @param showHighlightColor
     *          gibt an ob die Hintergrundfarbe angezeigt werden soll (gilt nur,
     *          wenn zu einem betroffenen Druckblock auch eine Hintergrundfarbe
     *          angegeben ist).
     *
     * @author Christoph Lutz (D-III-ITD-5.1)
     */
	void setPrintBlocksProps([in] string blockname, [in] boolean visible, [in] boolean showHighlightColor);

    /**
     * Setzt den Sichtbarkeitsstatus der Sichtbarkeitsgruppe groupID auf den
     * neuen Status visible und wirkt sich damit auf alle Dokumentkommandos
     * WM(CMD'setGroups'...) bzw. alle Textbereiche aus, die über eine
     * GROUPS-Zuordnung die Sichtbarkeitsgruppe groupId verknüpft haben.
     *
     * @param groupID
     *          Name der Sichtbarkeitsgruppe, deren Sichtbarkeitsstatus
     *          verändert werden soll
     * @param visible
     *          Bei dem Wert true ist die Sichtbarkeitsgruppe sichtbar und bei
     *          false unsichtbar.
     */
	void setGroupVisible([in] string groupID, [in] boolean visible);

    /**
     * Liefert true, wenn der Druckvorgang aufgrund einer Benutzereingabe oder eines
     * vorangegangenen Fehlers abgebrochen wurde (siehe cancel()) und sollte
     * insbesonders von Druckfunktionen ausgewertet werden, die mehrmals
     * printWithProps() aufrufen und dabei aufwendige Vor- und Nacharbeiten leisten
     * müssen (die in diesem Fall sobald sinnvoll möglich eingestellt werden können).
     */
	boolean isCanceled();

    /**
     * Setzt das Flag isCanceled() auf true und sorgt dafür, dass künftige Aufrufe
     * von printWithProps() sofort ohne Wirkung zurückkehren. Die Methode kann von
     * jeder Druckfunktion aufgerufen werden wenn Fehler auftreten oder der
     * Druckvorgang durch den Benutzer abgebrochen wurde.
     */
	void cancel();

    /**
     * Diese Methode aktiviert die Anzeige der Fortschrittsleiste und initialisiert
     * die Anzahl der von dieser Druckfunktion zu erwartenden Versionen auf maxValue,
     * wenn maxValue größer 0 ist, oder entfernt die Druckfunktion aus der
     * Fortschrittsanzeige, wenn maxValue gleich 0 ist. Die Fortschrittsanzeige ist
     * prinzipiell in der Lage, den Druckstatus verschiedener verketteter
     * Druckfunktionen anzuzeigen. Die Berechnung der Gesamtausfertigungen und des
     * aktuellen Gesamtstatus wird von der Fortschrittsanzeige übernommen. Damit muss
     * jede Druckfunktion hier auch nur die Anzahl Versionen setzen, die von der
     * Druckfunktion selbst erzeugt werden.
     *
     * @param maxValue
     *          den maximalen Wert der von dieser Druckfunktion zu druckenden
     *          Ausfertigungen.
     */
	void setPrintProgressMaxValue([in] short maxValue);

    /**
     * Über diese Methode wird der Fortschrittsleiste ein neuer Fortschrittstatus
     * value (=Anzahl bis jetzt tatsächlich gedruckter Versionen) der aktuellen
     * Druckfunktion übermittelt. Der Wert value muss im Bereich 0 <= value <=
     * maxValue (siehe setPrintProgressMaxValue(maxValue)) liegen.
     *
     * @param value
     *          Die Anzahl der bis jetzt tatsächlich von dieser Druckfunktion
     *          gedruckten Versionen. Es muss gelten: 0 <= value <= maxValue
     */
	void setPrintProgressValue([in] short value);

	/**
     * Diese Methode erlaubt das Setzen einer Nachricht, die in der
     * Fortschrittsleiste angezeigt wird. Der Fortschrittsbalken wird dabei
     * nicht zurückgesetzt, es wird lediglich der Textinhalt überschrieben.
     *
     * @param value
     *          Der anzuzeigende String.
     */
	void setPrintMessage([in] string value);
};

}; }; }; }; }; };

#endif
